****************************************
*              WARSHIPS                *
*         A game for Roona             *
****************************************
	ORG $2000

INIT	EQU $FB2F   AKA TEXT
HOME	EQU $FC58
PRBYTE	EQU $FDDA
COUT	EQU $FDED
CROUT	EQU $FD8E
RDKEY2	EQU $FD0C
VTAB	EQU $FC22
WAIT	EQU $FCA8   A:4 ~1s A:2 ~.5s

RNDL	EQU $4E
RNDH	EQU $4F
WNDLFT	EQU $20     LEFT MARGIN
WNDBTM	EQU $23     BOTTOM MARGIN
CH	EQU $24
CV	EQU $25
MASK	EQU $32
NORMAL	EQU %11111111
FLASHING	EQU %01111111
INVERSE	EQU %00111111

LINE1	EQU $400    TOP LEFT
PTR	EQU $06

SHIPSCNT	EQU 5
SHIPSIZE	EQU 9
HITSMAX	EQU 17    5+4+3+3+2

****************************************
	JMP Entry

ScrDirty	HEX 01
ShipCurr	HEX 01
Player	HEX 00

Entry	JSR INIT
	JSR HOME
	JSR Print
	ASC "WARSHIPS"
	HEX 8D00
	JSR PressKey
	JSR Print
	ASC "A GAME FOR ROONA"
	HEX 8D
	ASC "HAPPY BIRTHDAY!"
	HEX 8D
	ASC "LOVE, UNCLE NIGEL"
	HEX 8D00
	JSR PressKey
Setup	LDA ScrDirty
	BEQ Setup1
	JSR HOME
	JSR PrCols
	JSR DrwShps
	DEC ScrDirty
Setup1	JSR Input
	JMP Setup
*
Play	LDA #0
	STA ShipCurr
	LDA hits
	CMP #HITSMAX
	BEQ Win
	LDA hits+1
	CMP #HITSMAX
	BEQ Loss
	LDA Player
	BNE Player2
Player1	JSR HOME
	JSR PrScore
	JSR PrCols
	JSR DrwTrys
	JSR PrCursor
	JSR Input
	JMP Play
Player2	JSR HOME
	JSR PrCols
	JSR DrwShps
	JSR RandLoc
	JSR PrCursor
	JSR Fire
	JMP Play
Win	JMP Victory
Loss	JMP Defeat

RandLoc	LDA RNDL
	AND #$0F
	TAX
	CPX #10
	BCC RandLocY
	SBC #9    A-10 SINCE CARRY SET
	TAX
RandLocY	LDA RNDH
	AND #$0F
	TAY
	CPY #10
	BCC RandLoc1
	SBC #9    A-10 SINCE CARRY SET
	TAY
RandLoc1	STX Ships+0    CURSOR.X
	STY Ships+1    CURSOR.Y
RandLoc2	JSR tried
	BEQ RandLoc5
*	JSR Notify
*	ASC "DEBUG: RETRY"
*	HEX 00
*	JSR PrCursor
*	JSR PressKey
	LDA #9
	CMP Ships+0
	BNE RandLoc3
	CMP Ships+1
	BNE RandLoc4
	LDA #0
	STA Ships+0
	STA Ships+1
	JMP RandLoc2
RandLoc3 JSR Right
	JMP RandLoc2
RandLoc4 JSR Down
	LDA #0
	STA Ships+0
	JMP RandLoc2
RandLoc5	RTS

PrScore	LDA CV
	PHA
	LDA CH
	PHA
	SEC
	LDA WNDBTM
	SBC #2
	STA CV
	LDA #0
	STA CH
	JSR VTAB
	LDA hits
	JSR PRBYTE
	LDA #$A0
	JSR COUT
	LDA hits+1
	JSR PRBYTE
	PLA
	STA CH
	PLA
	STA CV
	JSR VTAB
	RTS

* PrCols prints the column names.
PrCols	LDX #0
PrCols1	LDA PrColsD,X
	BEQ PrCols2
	STA LINE1,X
	INX
	JMP PrCols1
PrColsD	ASC " 12345678910"
	HEX 00
PrCols2	NOP

* PrRows prints the row names.
PrRows	LDX #0
PrRows1	LDA PrRowsD,X
	BEQ PrRows2,X
	JSR COUT
	JSR CROUT
	INX
	JMP PrRows1
PrRowsD	ASC " ABCDEFGHIJ"
	HEX 00
PrRows2	RTS

PrCursor	LDA Ships      CURSOR.X
	LDY Ships+1    CURSOR.Y
	JMP MvCursAY

Quit	JSR HOME
	JSR Print
	ASC "Thank you for playing!"
	HEX 8D00
	JMP $3D0       RE-ENTER DOS

* Input checks for a key press and
* calls the appropriate handler.
Input	JSR RDKEY2
	CMP #$9B    ESCAPE
	BEQ Quit
	CMP #$A0    SPACE
	BEQ InputSpc
	CMP #$8D    RETURN/CTRL-M
	BEQ InputRet
	CMP #$88    LEFT ARROW
	BEQ Left
	CMP #$95    RIGHT ARROW
	BEQ Right
	CMP #$8A    DOWN ARROW
	BEQ InputDwn
	CMP #$8B    UP ARROW
	BEQ Up
	CMP #$89    TAB
	BEQ InputTab
	CMP #$D2    "R"
	BEQ InputR
	CMP #$B0
	BCC Input1
	CMP #$BA
	BCC InputNum  "1"-"9"
Input1	CMP #$C1
	BCC Input2  A < "A"
	CMP #$CB
	BCS Input2  A >= "K"
	CLC
	SBC #$BF    A-"A" - 2?
	STA Ships+1  CURSOR.Y
	DEC Ships+1  CURSOR.Y
Input2	RTS
InputDwn JMP Down
InputTab	JMP Tab
InputR	JMP Rotate
InputSpc	JMP Play
InputNum	CLC
	SBC #$AF    A-"0" + 1
	BNE InputNu1
	LDA #10
InputNu1	STA Ships   CURSOR.X
	DEC Ships
	RTS
InputRet LDA ShipCurr
	BNE Input2
	JMP Fire

Left	LDX ShipCurr
	LDY #SHIPSIZE
	JSR ArrItem
	LDA Ships+0,X  SHIP.X
	BEQ Left1
	DEC Ships+0,X  SHIP.X
	INC ScrDirty
Left1	RTS

Right	LDX ShipCurr
	LDY #SHIPSIZE
	JSR ArrItem
	INC Ships+0,X  SHIP.X
*
	LDA Ships+0,X  SHIP.X
	LDY Ships+2,X  SHIP.DIR
	BEQ Right1
* CHECK IF S.DIR=H && S.X + S.LEN < 10
	CLC
	ADC Ships+3,X  SHIP.LEN
	SEC
	SBC #1
Right1	CMP #10
	BCC Right2
	DEC Ships+0,X  HIT RIGHT EDGE
	RTS
Right2	INC ScrDirty
	RTS

Up	LDX ShipCurr
	LDY #SHIPSIZE
	JSR ArrItem
	LDA Ships+1,X  SHIP.Y
	BEQ Left1
	DEC Ships+1,X  SHIP.Y
	INC ScrDirty
Up1	RTS

Down	LDX ShipCurr
	LDY #SHIPSIZE
	JSR ArrItem
	INC Ships+1,X  SHIP.Y
*
	LDA Ships+1,X  SHIP.Y
	LDY Ships+2,X  SHIP.DIR
	BNE Down1
* CHECK IF S.DIR=V && S.X + S.LEN < 10
	CLC
	ADC Ships+3,X  SHIP.LEN
	SEC
	SBC #1
Down1	CMP #10
	BCC Down2
	DEC Ships+1,X  HIT BOTTOM
	RTS
Down2	INC ScrDirty
	RTS

Tab	INC ScrDirty
	INC ShipCurr
	LDA ShipCurr
	CMP #SHIPSCNT+1
	BNE Tab1
	LDA #1
	STA ShipCurr
Tab1	RTS

Rotate	LDX ShipCurr
	LDY #SHIPSIZE
	JSR ArrItem
	LDA Ships+2,X  SHIP.DIR
	EOR #%00000001
	STA Ships+2,X
	BNE Rotate2
* VERTICAL; CHECK HEIGHT
	LDA Ships+1,X  SHIP.Y
	CLC
	ADC Ships+3,X  SHIP.LEN
	CMP #10
	BCC Rotate3
	LDA #10
	SEC
	SBC Ships+3,X
	STA Ships+1,X
	JMP Rotate3
* HORIZONTAL; CHECK WIDTH
Rotate2	LDA Ships+0,X  SHIP.X
	CLC
	ADC Ships+3,X  SHIP.LEN
	CMP #10
	BCC Rotate3
	LDA #10
	SEC
	SBC Ships+3,X
	STA Ships+0,X
*
Rotate3	INC ScrDirty
	RTS

Notify	SEC
	LDA WNDBTM
	SBC #3
	STA CV
	LDA #0
	STA CH
	JSR VTAB
*        FALLTHRU

* Prints an ASCII string.
* From Wagner's "Assembly Lines" pg 125
Print	PLA
	STA PTR
	PLA
	STA PTR+1
	LDY #$01
Print1	LDA (PTR),Y
	BEQ Print2
	JSR COUT
	INY
	BNE Print1
Print2	CLC
	TYA
	ADC PTR
	STA PTR
	LDA PTR+1
	ADC #$00
	PHA
	LDA PTR
	PHA
	RTS

* ArrItem calculates the offset of an
* item in an array.
* INPUT:
*   X item number
*   Y size of each element
* OUTPUT:
*   X contains the offset
*   A contains the offset
*   Y is unchanged.
ArrItem	STY ArrItemT
	LDA #0
	CLC
ArrItem1	DEX
	CPX #$FF
	BEQ ArrItem2
	ADC ArrItemT
	JMP ArrItem1
ArrItem2	TAX
	RTS
*
ArrItemT HEX 00

* DrwShps draws all 5 ships.
DrwShps	LDA CH
	PHA
	LDA CV
	PHA
*	FOR I=[1,SHIPSCNT]: DrwShip(I)
	LDX #1
	STX DrwShpsS
DrwShps1	LDY #SHIPSIZE
	JSR ArrItem
	JSR DrwShip
	INC DrwShpsS
	LDX DrwShpsS
	CPX #SHIPSCNT+1
	BNE DrwShps1
*	DRAW CURRENT SHIP INVERSE
	LDA #INVERSE
	STA MASK
	LDX ShipCurr
	LDY #SHIPSIZE
	JSR ArrItem
	JSR DrwShip
	LDA #NORMAL
	STA MASK
*
	PLA
	STA CV
	PLA
	STA CH
	JMP VTAB
*
DrwShpsS	HEX 00

* DrwShip draws the X-th ship.
DrwShip	LDA Ships+0,X
	LDY Ships+1,X
	JSR MvCursAY
	LDA Ships+2,X
	STA ShipDir
	LDA Ships+3,X
	STA ShipLen
*	FOR Y=0; Y<SHIP.LEN; Y++
	LDY #0
DrwShip1	CPY ShipLen
	BCS DrwShip3
	LDA Ships+4,X
	JSR COUT
	LDA ShipDir
	BNE DrwShip2
	DEC CH
	INC CV
	JSR VTAB
DrwShip2	INX
	INY
	JMP DrwShip1
*
DrwShip3	RTS
*
DrwShipI HEX 00
ShipLen	HEX 00
ShipDir	HEX 00   0=HORIZ 1=VERT

* type Ship struct (size 9)
*   { 0:X 1:Y
*     2:HORIZ?
*     3:LEN
*     4-8:HITS }
* Ships[0] USED FOR SIMPLER INPUT SUBR.
Ships	DFB 0,0,0,1,$00,0,0,0,0
	DFB 0,0,0,5,$B5,$B5,$B5,$B5,$B5
	DFB 1,0,0,4,$B4,$B4,$B4,$B4,0
	DFB 2,0,0,3,$B3,$B3,$B3,0,0
	DFB 3,0,0,3,$C4,$C4,$C4,0,0
	DFB 4,0,1,2,$B2,$B2,0,0,0
* ENEMEY SHIPS
EShips	DFB 0,0,0,5,$B5,$B5,$B5,$B5,$B5
	DFB 1,0,0,4,$B4,$B4,$B4,$B4,0
	DFB 2,0,0,3,$B3,$B3,$B3,0,0
	DFB 3,0,0,3,$C4,$C4,$C4,0,0
	DFB 4,0,1,2,$B2,$B2,0,0,0

* Y = 0
* FOR X=0; X<100; X++
*   T = tries[Y][X]
*   IF T==$00: COUT SPACE
*   ELSE     : COUT @T
*   Y++
*   IF Y<10: CONTINUE
*   Y=0
*   CROUT
*   CH=2
* NEXT
DrwTrys	LDA #0
	TAY
	TAX
	JSR MvCursor
DrwTrys1	CPX #100
	BEQ DrwTrys3
	LDA tries,X
	JSR COUT
	INY
	CPY #10
	BNE DrwTrys2
	LDY #0
	JSR CROUT
	LDA #1
	STA CH
DrwTrys2	INX
	JMP DrwTrys1
DrwTrys3	RTS

* Fire checks to see if an enemy ship
* is under the cursor. If not, it marks
* the cooresponding tries location with
* a "-". If so, the tries location is
* marked with an "X" and the hits count
* is incremented. If hits count equals
* the sum of the ships lengths, the
* player wins and the game ends.
*	FOR I=1; I<=ESHIPS.CNT; I++
Fire	JSR tried
	BEQ Fire0
	RTS
Fire0	LDX #1
	STX FireI
Fire1	LDA FireI
	CMP #SHIPSCNT+1
	BEQ Miss
	LDX Player
	BNE Fire2
	CLC
	ADC #5      ENEMY SHIPS OFFSET
Fire2	TAX
	LDY #SHIPSIZE
	JSR ArrItem
	JSR fireAt
	BCS Hit
	INC FireI
	JMP Fire1
Hit	JSR Notify
	ASC "Hit!"
	HEX 00
	JSR PrCursor
	JSR PressKey
	LDX Player
	INC hits,X
	LDA #$D8       "X"
	STA FireCh
	JMP Fire3
Miss	JSR Notify
	ASC "Miss!"
	HEX 00
	JSR PrCursor
	JSR PressKey
	LDA #$AD       "-"
	STA FireCh
Fire3	LDX triedTmp
	LDA FireCh
	STA tries,X
	LDA Player
	EOR #%00000001
	STA Player
	RTS
FireI	HEX 00
FireCh	HEX 00

* tried checks to see if the current
* location was already fired upon.
tried	LDA #0
	STA triedTmp
	LDX Ships+1    CURSOR.Y
	LDY #10
	JSR ArrItem
	STX triedTmp
	CLC
	LDA Ships+0    CURSOR.X
	ADC triedTmp
	LDY Player
	BEQ tried1     AI IS FIRING
	CLC
	ADC #100       USE enTries
tried1	STA triedTmp
	TAX
	LDA #$A0
	CMP tries,X
	RTS
triedTmp	HEX 00         OFFSET


*fireAt(i,j)
*  X <- offset from Ships
* if VERT
*   x == i
*   y <= j < y+len
* if HORZ
*   y == j
*   x <= i < x+len
* Interp Carry cleared as "No Hit".
fireAt	LDA Ships+2,X   SHIP.HORIZ?
	BNE fireAtH
fireAtV	LDA Ships+0,X   SHIP.X
	CMP Ships+0     CURSOR.X
	BNE fireAtMs
	LDA Ships+1     CURSOR.Y
	CMP Ships+1,X   SHIP.Y
	BCC fireAtMs
	CLC
	LDA Ships+1,X   SHIP.Y
	ADC Ships+3,X   SHIP.LEN
	TAY
	DEY
	TYA
	CMP Ships+1     CURSOR.Y
	BCS fireAtHt
	JMP fireAtMs
fireAtHt	SEC
	RTS
fireAtH	LDA Ships+1,X   SHIP.Y
	CMP Ships+1     CURSOR.Y
	BNE fireAtMs
	LDA Ships+0     CURSOR.X
	CMP Ships+0,X   SHIP.X
	BCC fireAtMs
	CLC
	LDA Ships+0,X   SHIP.X
	ADC Ships+3,X   SHIP.LEN
	TAY
	DEY
	TYA
	CMP Ships+0     CURSOR.X
	BCS fireAtHt
fireAtMs	CLC
	RTS

Victory	JSR Notify
	ASC "VICTORY! YOU WON!"
	HEX 00
	JSR PressKey
	JMP Quit

Defeat	JSR Notify
	ASC "DEFEAT! YOU LOST!"
	HEX 00
	JSR PressKey
	JMP Quit

* MvCursAY moves the cursor to (A,Y)
MvCursAY	STA CH
	JMP MvCurso1
* MvCursor moves the cursor to (X,Y)
MvCursor	STX CH
MvCurso1	STY CV
	INC CH
	INC CV
	JMP VTAB

PressKey	JMP RDKEY2    JSR&RTS

hits	HEX 00
	HEX 10
*            1 2 3 4 5 6 7 8 9 10
tries	HEX A0A0A0A0A0A0A0A0A0A0  A
	HEX A0A0A0A0A0A0A0A0A0A0  B
	HEX A0A0A0A0A0A0A0A0A0A0  C
	HEX A0A0A0A0A0A0A0A0A0A0  D
	HEX A0A0A0A0A0A0A0A0A0A0  E
	HEX A0A0A0A0A0A0A0A0A0A0  F
	HEX A0A0A0A0A0A0A0A0A0A0  G
	HEX A0A0A0A0A0A0A0A0A0A0  H
	HEX A0A0A0A0A0A0A0A0A0A0  I
	HEX A0A0A0A0A0A0A0A0A0A0  J
*            1 2 3 4 5 6 7 8 9 10
enTries	HEX A0A0A0A0A0A0A0A0A0A0  A
	HEX A0A0A0A0A0A0A0A0A0A0  B
	HEX A0A0A0A0A0A0A0A0A0A0  C
	HEX A0A0A0A0A0A0A0A0A0A0  D
	HEX A0A0A0A0A0A0A0A0A0A0  E
	HEX A0A0A0A0A0A0A0A0A0A0  F
	HEX A0A0A0A0A0A0A0A0A0A0  G
	HEX A0A0A0A0A0A0A0A0A0A0  H
	HEX A0A0A0A0A0A0A0A0A0A0  I
	HEX A0A0A0A0A0A0A0A0A0A0  J


* vim: set noexpandtab tabstop=9 sts=9 sw=9 invlist textwidth=40 colorcolumn=40 filetype=asmMerlin65816:
